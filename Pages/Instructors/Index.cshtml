@page "{id:int?}"
@model ContosoUniversity.Pages.Instructors.IndexModel
@using System.Text.Json;

@{
    ViewData["Title"] = "Instructor";
}
<style>
    body {
        background-color: #EFE9D5; /* Light off-white background color */
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .card {
        border: 2px solid #27445D; /* Deep blue-green border for the card */
        border-radius: 8px;
        background-color: white;
    }

    .card-text {
        color: #27445D; /* Deep blue-green text color */
    }

    .card-header, .card-footer {
        background-color: #27445D; /* Deep blue-green background for header/footer */
        color: white;
        border-radius: 8px 8px 0 0;
    }

        .card-header h5 {
            pointer-events: none; /* Prevents the header from triggering the link click */
        }

    .btn-primary {
        background-color: #49D74; /* Light green button color */
        border-color: #49D74;
        color: white;
        border-radius: 5px;
        padding: 10px 20px;
    }

        .btn-primary:hover {
            background-color: #71BBB2; /* Hover state with lighter blue-green */
            border-color: #71BBB2;
        }

    .stretched-link {
        color: #49D74;
        text-decoration: underline;
    }

        .stretched-link:hover {
            color: #27445D;
        }

    .row {
        margin-bottom: 20px;
    }

    .container {
        max-width: 1200px;
    }

    .col-md-4 .card {
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .card-body {
        padding: 20px;
    }

    #instructorChart {
        max-width: 100%; /* Makes sure the chart doesn't overflow */
        margin: 20px auto; /* Centers the chart */
    }
</style>
<h2>Instructors</h2>

<p>
    <a asp-page="Create">Create New</a>
</p>

<form asp-page="./Index" method="get">
    <div class="form-actions no-color">
        <p>
            Find by name:
            <input type="text" name="SearchString" value="@Model.CurrentFilter" />
            <input type="submit" value="Search" class="btn btn-primary" /> |
            <a asp-page="./Index">Back to full List</a>
        </p>
    </div>
</form>

<table class="table">
    <thead>
        <tr>
            <th>
                <a asp-page="./Index" asp-route-sortOrder="@Model.NameSort"
                asp-route-currentFilter="@Model.CurrentFilter">
                    @Html.DisplayNameFor(model => model.Instructors[0].LastName)
                </a>
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Instructors[0].FirstMidName)
            </th>
            <th>
                <a asp-page="./Index" asp-route-sortOrder="@Model.DateSort"
                asp-route-currentFilter="@Model.CurrentFilter">
                    @Html.DisplayNameFor(model => model.Instructors[0].HireDate)
                </a>
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Instructors)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.LastName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.FirstMidName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.HireDate)
                </td>

                <td>
                    <a asp-page="./Edit" asp-route-id="@item.ID">Edit</a> |
                    <a asp-page="./Details" asp-route-id="@item.ID">Details</a> |
                    <a asp-page="./Delete" asp-route-id="@item.ID">Delete</a> |
                    <a asp-page="./Index" asp-route-id="@item.ID">Select</a>
                </td>
            </tr>
        }
    </tbody>
</table>

@if (Model.InstructorData?.Course != null)
{
    <h3>Courses Taught by Selected Instructor</h3>
    <table class="table">
        <tr>
            <th></th>
            <th>Number</th>
            <th>Title</th>
            <th>Department</th>
        </tr>

        @foreach (var item in Model.InstructorData.Course)
        {
            string selectedRow = item.CourseID == Model.CourseID ? "table-success" : "";
            <tr class="@selectedRow">
                <td>
                    <a asp-page="./Index" asp-route-courseID="@item.CourseID">Select</a>
                </td>
                <td>@item.CourseID</td>
                <td>@item.Title</td>
                <td>@item.Department.Name</td>
            </tr>
        }
    </table>
}

@if (Model.InstructorData?.Enrollments != null)
{
    <h3>Students Enrolled in Selected Course</h3>
    <table class="table">
        <tr>
            <th>Name</th>
            <th>Grade</th>
        </tr>
        @foreach (var item in Model.InstructorData.Enrollments)
        {
            <tr>
                <td>@item.Student.FullName</td>
                <td>@Html.DisplayFor(modelItem => item.Grade)</td>
            </tr>
        }
    </table>
}

@{
    var prevDisabled = !Model.Instructors.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.Instructors.HasNextPage ? "disabled" : "";
}

<a asp-page="./Index"
   asp-route-sortOrder="@Model.CurrentSort"
   asp-route-pageIndex="@(Model.Instructors.PageIndex - 1)"
   asp-route-currentFilter="@Model.CurrentFilter"
   class="btn btn-primary @prevDisabled">
    Previous
</a>
<a asp-page="./Index"
   asp-route-sortOrder="@Model.CurrentSort"
   asp-route-pageIndex="@(Model.Instructors.PageIndex + 1)"
   asp-route-currentFilter="@Model.CurrentFilter"
   class="btn btn-primary @nextDisabled">
    Next
</a>
<canvas id="instructorChart" width="400" height="300"></canvas> <!-- Smaller size -->

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    var ctx = document.getElementById('instructorChart').getContext('2d');
    var enrollmentChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: @Html.Raw(JsonSerializer.Serialize(Model.TeachingYears)), // X-axis: Years
            datasets: [{
                label: 'Enrollments',
                data: @Html.Raw(JsonSerializer.Serialize(Model.TeachingCount)), // Y-axis: Count
                backgroundColor: 'rgba(54, 162, 235, 0.6)',
                borderColor: 'rgba(54, 162, 235, 1)',
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });
</script>
